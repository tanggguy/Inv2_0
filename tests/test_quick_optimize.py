#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'int√©gration Optuna dans quick_optimize

Test automatis√© pour s'assurer que toutes les fonctionnalit√©s marchent
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

print("="*70)
print("üß™ TEST QUICK_OPTIMIZE AVEC OPTUNA")
print("="*70)

# Test 1: Imports
print("\n1Ô∏è‚É£  Test des imports...")
try:
    from optimization.optuna_presets import OPTUNA_PRESETS, get_optuna_preset, list_optuna_presets
    from optimization.optimizer import UnifiedOptimizer
    from strategies.rsi_strategy import RSIStrategy
    print("   ‚úÖ Tous les imports r√©ussis")
except Exception as e:
    print(f"   ‚ùå Erreur d'import: {e}")
    sys.exit(1)

# Test 2: Liste des presets Optuna
print("\n2Ô∏è‚É£  Test liste des presets Optuna...")
try:
    presets = list_optuna_presets()
    print(f"   ‚úÖ {len(presets)} presets disponibles:")
    for preset in presets:
        print(f"      ‚Ä¢ {preset}")
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")
    sys.exit(1)

# Test 3: Chargement d'un preset
print("\n3Ô∏è‚É£  Test chargement preset 'optuna_quick'...")
try:
    config = get_optuna_preset('optuna_quick')
    print("   ‚úÖ Preset charg√© avec succ√®s")
    print(f"      ‚Ä¢ Trials: {config['optuna']['n_trials']}")
    print(f"      ‚Ä¢ Sampler: {config['optuna']['sampler']}")
    print(f"      ‚Ä¢ Pruner: {config['optuna']['pruner']}")
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")
    sys.exit(1)

# Test 4: Cr√©ation d'un optimiseur avec Optuna
print("\n4Ô∏è‚É£  Test cr√©ation optimiseur Optuna...")
try:
    # Modifier la config pour un test tr√®s rapide
    config['optuna']['n_trials'] = 5  # Seulement 5 trials pour le test
    config['period'] = {
        'start': '2024-01-01',
        'end': '2024-02-01'  # 1 mois seulement
    }
    
    optimizer = UnifiedOptimizer(
        strategy_class=RSIStrategy,
        config=config,
        optimization_type='optuna',
        verbose=False,
        use_parallel=False  # Mode s√©quentiel pour le test
    )
    print("   ‚úÖ Optimiseur cr√©√© avec succ√®s")
    print(f"      ‚Ä¢ Run ID: {optimizer.run_id}")
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")
    sys.exit(1)

# Test 5: Ex√©cution rapide (5 trials)
print("\n5Ô∏è‚É£  Test ex√©cution rapide (5 trials)...")
print("   ‚è≥ Lancement de l'optimisation (ceci peut prendre 30-60 secondes)...")

try:
    results = optimizer.run()
    
    if results and 'best' in results:
        print("   ‚úÖ Optimisation termin√©e avec succ√®s")
        print(f"      ‚Ä¢ Meilleur Sharpe: {results['best'].get('sharpe', 0):.2f}")
        print(f"      ‚Ä¢ Nombre de r√©sultats: {len(results.get('all_results', []))}")
        
        # V√©rifier l'importance des param√®tres
        if 'param_importance' in results:
            print("      ‚Ä¢ Importance des param√®tres calcul√©e ‚úì")
        else:
            print("      ‚ö†Ô∏è  Importance des param√®tres non disponible")
    else:
        print("   ‚ö†Ô∏è  Optimisation termin√©e mais r√©sultats incomplets")
        
except Exception as e:
    print(f"   ‚ùå Erreur pendant l'optimisation: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Test 6: V√©rifier les visualisations
print("\n6Ô∏è‚É£  Test g√©n√©ration des visualisations...")
try:
    from pathlib import Path
    plots_dir = Path("optimization/optuna_plots")
    
    if plots_dir.exists():
        plots = list(plots_dir.glob(f"{optimizer.run_id}_*.html"))
        if plots:
            print(f"   ‚úÖ {len(plots)} visualisations g√©n√©r√©es:")
            for plot in plots:
                print(f"      ‚Ä¢ {plot.name}")
        else:
            print("   ‚ö†Ô∏è  Aucune visualisation trouv√©e (peut √™tre normal pour si peu de trials)")
    else:
        print("   ‚ö†Ô∏è  Dossier optuna_plots non cr√©√©")
        
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")

# Test 7: V√©rifier la base de donn√©es Optuna
print("\n7Ô∏è‚É£  Test base de donn√©es Optuna...")
try:
    from pathlib import Path
    db_path = Path("optimization/optuna_studies/optuna.db")
    
    if db_path.exists():
        print(f"   ‚úÖ Base de donn√©es trouv√©e")
        print(f"      ‚Ä¢ Taille: {db_path.stat().st_size / 1024:.2f} KB")
    else:
        print("   ‚ö†Ô∏è  Base de donn√©es non trouv√©e")
        
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")

# R√©sum√© final
print("\n" + "="*70)
print("üìä R√âSUM√â DES TESTS")
print("="*70)
print("‚úÖ Tous les tests ont r√©ussi !")
print("\nüéâ L'int√©gration Optuna est fonctionnelle")
print("\nVous pouvez maintenant utiliser:")
print("  python scripts/quick_optimize_optuna.py")
print("\nOu pour tester l'original (qui devrait aussi marcher):")
print("  python scripts/quick_optimize.py")
print("="*70)