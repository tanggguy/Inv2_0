# ============================================================================
# üî¨ CONFIGURATION D'OPTIMISATION OPTUNA
# ============================================================================
# 
# Ce fichier d√©finit la configuration compl√®te pour l'optimisation Optuna
# d'une strat√©gie de trading.
#
# Structure:
#   - strategy: D√©finition de la strat√©gie √† optimiser
#   - config: Configuration g√©n√©rale (symboles, p√©riode, capital)
#   - optuna: Param√®tres de l'optimiseur Optuna
#   - param_grid: Grille des param√®tres √† optimiser
#   - profiles: Profils pr√©d√©finis (quick/dev/prod)
#
# Usage:
#   python scripts/run_optuna_from_yaml.py optimization_configs/ma_strategy.yaml
#   python scripts/run_optuna_from_yaml.py optimization_configs/ma_strategy.yaml --profile prod
#
# ============================================================================

# ----------------------------------------------------------------------------
# üéØ STRAT√âGIE √Ä OPTIMISER
# ----------------------------------------------------------------------------
strategy:
  # Chemin Python complet vers la classe de strat√©gie
  # Format: module.sous_module.NomClasse
  class: "strategies.marsi.MaRSI"
  
  # Nom de la strat√©gie (pour les logs et rapports)
  name: "MaRSI"
  
  # Description optionnelle
  description: "Strat√©gie combinant MA, RSI avec trailing stop"

# ----------------------------------------------------------------------------
# ‚öôÔ∏è CONFIGURATION G√âN√âRALE
# ----------------------------------------------------------------------------
config:
  # Symboles √† trader (liste)
  symbols:
    - AAPL
    - MSFT
    - GOOGL
    - AMZN
    - QQQ
    - NKE
    - TTE.PA
    - SPY
    - OR.PA
  
  # P√©riode de test
  period:
    start: "2021-01-01"
    end: "2025-01-01"
  
  # Capital initial en USD
  capital: 100000

# ----------------------------------------------------------------------------
# üî¨ PARAM√àTRES OPTUNA
# ----------------------------------------------------------------------------
optuna:
  # Nombre d'essais (trials)
  # Plus √©lev√© = meilleure exploration mais plus long
  # Recommand√©: 50-200 pour tests, 500-1000+ pour production
  n_trials: 200
  
  # Timeout en secondes (null = pas de limite)
  # Exemple: 3600 = 1 heure
  timeout: null
  
  # Algorithme de sampling
  # Options:
  #   - tpe: Tree-structured Parzen Estimator (recommand√©, intelligent)
  #   - random: √âchantillonnage al√©atoire
  #   - cmaes: Covariance Matrix Adaptation Evolution Strategy
  #   - grid: Grid search (exhaustif)
  sampler: "tpe"
  
  # Strat√©gie de pruning (arr√™t pr√©coce)
  # Options:
  #   - median: Arr√™te si en-dessous de la m√©diane
  #   - successive_halving: Tr√®s agressif
  #   - hyperband: √âquilibr√©
  #   - none: Pas de pruning
  pruner: "median"
  
  # Nombre de jobs parall√®les
  # -1 = utiliser tous les CPU disponibles
  # 1 = s√©quentiel
  # N = N processus en parall√®le
  n_jobs: 7
  
  # Sauvegarder les visualisations HTML
  save_plots: false
  
  # M√©trique √† optimiser (pour r√©f√©rence, g√©r√© automatiquement) : sharpe,return,drawdown
  optimize_metric: "sharpe"
  
  # Direction de l'optimisation
  direction: "maximize"

# ----------------------------------------------------------------------------
# ‚öôÔ∏è GRILLE DE PARAM√àTRES √Ä OPTIMISER
# ----------------------------------------------------------------------------
# 
# Format pour chaque param√®tre:
#
# 1. Liste de valeurs discr√®tes:
#    param_name: [val1, val2, val3, ...]
#
# 2. Range continu (pour Optuna):
#    param_name:
#      type: "int" ou "float"
#      low: valeur_min
#      high: valeur_max
#      step: pas (optionnel pour int)
#      log: true/false (√©chelle logarithmique, optionnel)
#
# 3. Cat√©gorique:
#    param_name: ["option1", "option2", "option3"]
#
# ----------------------------------------------------------------------------
param_grid:
  # P√©riode de la moyenne mobile
  fast_ma_period:
    type: "int"
    low: 10
    high: 50
    step: 10
  #
  slow_ma_period:
    type: "int"
    low: 50
    high: 150
    step: 25
  #
  crossover_window:
    type: "int"
    low: 2
    high: 10
    step: 2
  # P√©riode RSI
  rsi_period:
    type: "int"
    low: 7
    high: 19
    step: 3
  #
  rsi_oversold:
    type: "int"
    low: 0
    high: 60
    step: 10
  # 
  rsi_overbought:
    type: "int"
    low: 60
    high: 90
    step: 10
  #
  volume_sma_period : 
    type: "int"
    low: 10
    high: 50
    step: 10

  
    

# ----------------------------------------------------------------------------
# üéØ PROFILS PR√âD√âFINIS
# ----------------------------------------------------------------------------
# 
# Les profils permettent de d√©finir des configurations alternatives
# qui surchargent la configuration de base.
#
# Usage:
#   python scripts/run_optuna_from_yaml.py config.yaml --profile quick

# ----------------------------------------------------------------------------
# üìù NOTES ET CONSEILS
# ----------------------------------------------------------------------------
#
# 1. CHOIX DU PROFIL:
#    - quick: V√©rification rapide (5-10 min)
#    - dev: D√©veloppement it√©ratif (30 min - 2h)
#    - prod: Optimisation finale (2h - 8h+)
#
# 2. NOMBRE DE TRIALS:
#    - Formule approximative: n_trials ‚âà 10 √ó nombre_de_param√®tres
#    - Pour 5 param√®tres: 50-100 trials minimum
#
# 3. SAMPLER:
#    - TPE: Le meilleur choix dans 95% des cas
#    - Random: Utile pour √©tablir une baseline
#
# 4. PRUNER:
#    - Median: Bon compromis vitesse/exploration
#    - None: Si vous avez du temps et voulez tout explorer
#
# 5. PARALL√âLISATION:
#    - n_jobs=-1: Utilise tous les CPU (recommand√©)
#    - Attention: Chaque job consomme de la RAM
#
# 6. VISUALISATION DES R√âSULTATS:
#    Apr√®s l'optimisation, lancez:
#    $ optuna-dashboard sqlite:///optimization/optuna_studies/optuna.db
#    
#    Puis ouvrez http://localhost:8080 dans votre navigateur
#
# 7. D√âFINITION DES RANGES:
#    - Commencez large, puis affinez
#    - Utilisez 'log: true' pour les param√®tres multiplicatifs
#    - step optionnel pour les entiers (sinon 1 par d√©faut)
#
# 8. GESTION M√âMOIRE:
#    Si vous manquez de RAM avec n_jobs=-1:
#    - R√©duisez n_jobs √† 4-8
#    - R√©duisez la p√©riode de test
#    - R√©duisez le nombre de symboles
#
# ============================================================================