"""
Paper Trading Engine - Moteur principal de paper trading avec Alpaca
"""
import signal
import sys
import time
from datetime import datetime
from pathlib import Path
from config.paper_trading_config import PAPER_TRADING_CONFIG, validate_config
from paper_trading.alpaca_store import AlpacaStore
from paper_trading.portfolio_state import PortfolioStateManager
from paper_trading.circuit_breaker import CircuitBreaker
from paper_trading.multi_strategy_runner import MultiStrategyRunner
from monitoring.logger import setup_logger
from monitoring.telegram_notifier import TelegramNotifier

logger = setup_logger("paper_engine")


class PaperTradingEngine:
    """
    Moteur principal de paper trading
    Coordonne tous les composants du syst√®me
    """
    
    def __init__(self, config=None):
        """
        Initialise le moteur de paper trading
        
        Args:
            config: Configuration personnalis√©e (optionnel)
        """
        # Configuration
        self.config = config or PAPER_TRADING_CONFIG
        
        # Valider la configuration
        try:
            validate_config()
        except ValueError as e:
            logger.error(f"Configuration invalide: {e}")
            raise
        
        # Composants principaux
        self.store = None
        self.portfolio_manager = None
        self.circuit_breaker = None
        self.strategy_runner = None
        self.notification_manager = None
        
        # √âtat du syst√®me
        self.running = False
        self.start_time = None
        self.stats = {
            'trades_executed': 0,
            'trades_won': 0,
            'trades_lost': 0,
            'total_pnl': 0,
            'peak_value': 0,
            'lowest_value': float('inf'),
            'errors': 0
        }
        
        # Gestionnaire de signaux pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info("PaperTradingEngine initialis√©")
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
        self.stop()
        sys.exit(0)
    
    def initialize(self):
        """Initialise tous les composants"""
        try:
            logger.info("="*60)
            logger.info("INITIALISATION DU SYST√àME DE PAPER TRADING")
            logger.info("="*60)
            
            # 1. Initialiser le store Alpaca
            logger.info("1. Initialisation d'Alpaca Store...")
            self.store = AlpacaStore(
                api_key=self.config['alpaca']['api_key'],
                secret_key=self.config['alpaca']['secret_key'],
                base_url=self.config['alpaca']['base_url'],
                data_url=self.config['alpaca']['data_url'],
                data_feed=self.config['alpaca']['data_feed']
            )
            account = self.store.get_account()
            logger.info(f"   ‚úì Connect√© - Cash: ${float(account.cash):,.2f}")
            
            # 2. Initialiser les notifications
            if self.config['notifications']['telegram_enabled']:
                logger.info("2. Initialisation des notifications Telegram...")
                self.notification_manager = TelegramNotifier(
                    bot_token=self.config['notifications']['telegram_bot_token'],
                    chat_id=self.config['notifications']['telegram_chat_id']
                )
                self.notification_manager.send_message("üöÄ Paper Trading Engine d√©marr√©")
                logger.info("   ‚úì Notifications activ√©es")
            else:
                logger.info("2. Notifications d√©sactiv√©es")
            
            # 3. Initialiser le gestionnaire de portefeuille
            logger.info("3. Initialisation du Portfolio Manager...")
            self.portfolio_manager = PortfolioStateManager(self.config)
            
            # Essayer de restaurer l'√©tat pr√©c√©dent
            previous_state = self.portfolio_manager.load_latest_state()
            if previous_state:
                logger.info(f"   ‚úì √âtat pr√©c√©dent restaur√© ({previous_state['timestamp']})")
            else:
                logger.info("   ‚úì Nouvel √©tat cr√©√©")
            
            # 4. Initialiser le circuit breaker
            logger.info("4. Initialisation du Circuit Breaker...")
            self.circuit_breaker = CircuitBreaker(
                self.config,
                self.notification_manager
            )
            initial_capital = float(account.portfolio_value)
            self.circuit_breaker.start(initial_capital)
            logger.info(f"   ‚úì Circuit breaker activ√© (Capital: ${initial_capital:,.2f})")
            
            # 5. Initialiser le runner multi-strat√©gies
            logger.info("5. Initialisation des strat√©gies...")
            self.strategy_runner = MultiStrategyRunner(
                self.config,
                self.store,
                self.circuit_breaker,
                self.portfolio_manager
            )
            self.strategy_runner.initialize()
            
            # Afficher les strat√©gies actives
            active_strategies = [s['name'] for s in self.config['strategies'] if s.get('enabled', True)]
            logger.info(f"   ‚úì {len(active_strategies)} strat√©gies pr√™tes: {', '.join(active_strategies)}")
            
            logger.info("="*60)
            logger.info("SYST√àME PR√äT")
            logger.info("="*60)
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation: {e}")
            if self.notification_manager:
                self.notification_manager.send_alert(f"‚ùå Erreur initialisation: {e}")
            raise
    
    def start(self):
        """D√©marre le paper trading"""
        try:
            if self.running:
                logger.warning("Le syst√®me est d√©j√† en cours d'ex√©cution")
                return
            
            logger.info("\n" + "="*60)
            logger.info("D√âMARRAGE DU PAPER TRADING")
            logger.info("="*60)
            
            self.running = True
            self.start_time = datetime.now()
            
            # D√©marrer les composants
            self.store.start()
            self.portfolio_manager.start()
            self.strategy_runner.start()
            
            logger.info("‚úì Tous les composants d√©marr√©s")
            
            # Notification de d√©marrage
            if self.notification_manager:
                self.notification_manager.send_message(
                    f"‚úÖ Paper Trading d√©marr√©\n"
                    f"Strat√©gies actives: {len(self.strategy_runner.strategies)}\n"
                    f"Capital initial: ${self.circuit_breaker.initial_capital:,.2f}"
                )
            
            # Boucle principale
            self._run_main_loop()
            
        except Exception as e:
            logger.error(f"Erreur lors du d√©marrage: {e}")
            self.stats['errors'] += 1
            if self.notification_manager:
                self.notification_manager.send_alert(f"‚ùå Erreur d√©marrage: {e}")
            raise
    
    def _run_main_loop(self):
        """Boucle principale du syst√®me"""
        logger.info("Boucle principale d√©marr√©e - Ctrl+C pour arr√™ter")
        
        last_performance_check = time.time()
        last_summary_time = datetime.now()
        performance_check_interval = 60  # V√©rifier toutes les minutes
        
        try:
            while self.running:
                current_time = time.time()
                
                # V√©rifier les performances p√©riodiquement
                if current_time - last_performance_check > performance_check_interval:
                    self._check_performance()
                    last_performance_check = current_time
                
                # Envoyer un r√©sum√© quotidien
                if self.config['notifications'].get('telegram_daily_summary'):
                    now = datetime.now()
                    summary_time = datetime.strptime(
                        self.config['notifications']['telegram_summary_time'], 
                        '%H:%M'
                    ).time()
                    
                    if now.time() >= summary_time and now.date() != last_summary_time.date():
                        self._send_daily_summary()
                        last_summary_time = now
                
                # Pause pour √©viter de surcharger le CPU
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("Interruption utilisateur d√©tect√©e")
        except Exception as e:
            logger.error(f"Erreur dans la boucle principale: {e}")
            self.stats['errors'] += 1
    
    def _check_performance(self):
        """V√©rifie et met √† jour les performances"""
        try:
            # R√©cup√©rer les infos du compte
            account = self.store.get_account()
            if not account:
                return
            
            current_value = float(account.portfolio_value)
            
            # Mettre √† jour les stats
            self.stats['peak_value'] = max(self.stats['peak_value'], current_value)
            self.stats['lowest_value'] = min(self.stats['lowest_value'], current_value)
            
            # V√©rifier le circuit breaker
            can_trade = self.circuit_breaker.check_conditions(current_value)
            
            # R√©cup√©rer les performances des strat√©gies
            strategy_perf = self.strategy_runner.get_performance()
            
            # Mettre √† jour l'√©tat du portefeuille
            self.portfolio_manager.update_state('account', {
                'portfolio_value': current_value,
                'cash': float(account.cash),
                'buying_power': float(account.buying_power),
                'timestamp': datetime.now().isoformat()
            })
            
            self.portfolio_manager.update_state('performance', {
                'total_pnl': strategy_perf['total_pnl'],
                'total_trades': strategy_perf['total_trades'],
                'can_trade': can_trade,
                'strategies': strategy_perf['strategies']
            })
            
            # Log p√©riodique
            logger.info(f"Performance Check - Value: ${current_value:,.2f} | "
                       f"PnL: ${strategy_perf['total_pnl']:+,.2f} | "
                       f"Trades: {strategy_perf['total_trades']} | "
                       f"Trading: {'‚úì' if can_trade else '‚úó'}")
            
        except Exception as e:
            logger.error(f"Erreur v√©rification performance: {e}")
            self.stats['errors'] += 1
    
    def _send_daily_summary(self):
        """Envoie un r√©sum√© quotidien"""
        try:
            if not self.notification_manager:
                return
            
            # R√©cup√©rer les infos
            account = self.store.get_account()
            strategy_perf = self.strategy_runner.get_performance()
            breaker_status = self.circuit_breaker.get_status()
            
            # Cr√©er le message
            message = f"""üìä **R√âSUM√â QUOTIDIEN**
            
üí∞ **Portefeuille**
‚Ä¢ Valeur: ${float(account.portfolio_value):,.2f}
‚Ä¢ Cash: ${float(account.cash):,.2f}
‚Ä¢ P&L Total: ${strategy_perf['total_pnl']:+,.2f}

üìà **Trading**
‚Ä¢ Trades: {strategy_perf['total_trades']}
‚Ä¢ Circuit Breaker: {'üî¥ PAUSE' if breaker_status['paused'] else 'üü¢ ACTIF'}

üéØ **Strat√©gies**"""
            
            for name, perf in strategy_perf['strategies'].items():
                message += f"\n‚Ä¢ {name}: ${perf['pnl']:+,.2f} ({perf['trades']} trades)"
            
            # Ajouter les alertes si n√©cessaire
            if breaker_status['paused']:
                message += f"\n\n‚ö†Ô∏è Trading suspendu jusqu'√† {breaker_status['pause_until']}"
            
            # Envoyer
            self.notification_manager.send_message(message)
            logger.info("R√©sum√© quotidien envoy√©")
            
        except Exception as e:
            logger.error(f"Erreur envoi r√©sum√©: {e}")
    
    def stop(self):
        """Arr√™te le paper trading"""
        try:
            if not self.running:
                return
            
            logger.info("\n" + "="*60)
            logger.info("ARR√äT DU PAPER TRADING EN COURS...")
            logger.info("="*60)
            
            self.running = False
            
            # Arr√™ter les composants dans l'ordre inverse
            if self.strategy_runner:
                logger.info("Arr√™t des strat√©gies...")
                self.strategy_runner.stop()
            
            if self.circuit_breaker:
                logger.info("Arr√™t du circuit breaker...")
                self.circuit_breaker.stop()
            
            if self.portfolio_manager:
                logger.info("Sauvegarde finale du portefeuille...")
                self.portfolio_manager.save_state()
                self.portfolio_manager.stop()
            
            if self.store:
                logger.info("Fermeture des connexions Alpaca...")
                self.store.stop()
            
            # Envoyer le r√©sum√© final
            self._send_final_summary()
            
            logger.info("="*60)
            logger.info("SYST√àME ARR√äT√â PROPREMENT")
            logger.info("="*60)
            
        except Exception as e:
            logger.error(f"Erreur lors de l'arr√™t: {e}")
    
    def _send_final_summary(self):
        """Envoie un r√©sum√© final √† l'arr√™t"""
        try:
            if not self.notification_manager:
                return
            
            # Calculer la dur√©e
            if self.start_time:
                duration = datetime.now() - self.start_time
                hours = duration.total_seconds() / 3600
            else:
                hours = 0
            
            # R√©cup√©rer les performances finales
            strategy_perf = self.strategy_runner.get_performance() if self.strategy_runner else {}
            
            message = f"""üõë **PAPER TRADING ARR√äT√â**
            
‚è±Ô∏è Dur√©e: {hours:.1f} heures
üìä P&L Final: ${strategy_perf.get('total_pnl', 0):+,.2f}
üìà Trades Total: {strategy_perf.get('total_trades', 0)}
‚ö†Ô∏è Erreurs: {self.stats['errors']}

Syst√®me arr√™t√© proprement."""
            
            self.notification_manager.send_message(message)
            
        except Exception as e:
            logger.error(f"Erreur envoi r√©sum√© final: {e}")
    
    def get_status(self):
        """Retourne le statut complet du syst√®me"""
        status = {
            'running': self.running,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'stats': self.stats.copy()
        }
        
        # Ajouter les statuts des composants
        if self.store:
            account = self.store.get_account()
            status['account'] = {
                'value': float(account.portfolio_value) if account else 0,
                'cash': float(account.cash) if account else 0
            }
        
        if self.circuit_breaker:
            status['circuit_breaker'] = self.circuit_breaker.get_status()
        
        if self.strategy_runner:
            status['strategies'] = self.strategy_runner.get_status()
        
        if self.portfolio_manager:
            status['portfolio'] = self.portfolio_manager.get_state_summary()
        
        return status


def main():
    """Fonction principale pour lancer le paper trading"""
    logger.info("="*60)
    logger.info("PAPER TRADING SYSTEM v1.0")
    logger.info("="*60)
    
    try:
        # Cr√©er et initialiser le moteur
        engine = PaperTradingEngine()
        
        if engine.initialize():
            # D√©marrer le trading
            engine.start()
        else:
            logger.error("√âchec de l'initialisation")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()