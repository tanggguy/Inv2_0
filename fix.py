#!/usr/bin/env python3
"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    CORRECTIF: Erreur Float/Int dans Walk-Forward Optimization
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Ce script corrige l'erreur "'float' object cannot be interpreted as an integer"
qui survient lors de l'optimisation Walk-Forward.

PROBL√àME:
- Les param√®tres optimaux du Grid Search sont stock√©s en float (ex: 7.0)
- Backtrader attend des int pour les p√©riodes (ex: 7)
- Erreur lors du passage au test Out-Sample

SOLUTION:
- Convertir automatiquement les float en int quand n√©cessaire
- Pr√©server les vrais float (ex: seuils, pourcentages)

UTILISATION:
1. Sauvegardez ce fichier dans votre projet
2. Ex√©cutez: python fix_optimizer_float_error.py
3. Relancez votre optimisation Walk-Forward
"""

import re
from pathlib import Path


def create_param_converter():
    """Cr√©e la fonction de conversion des param√®tres"""
    return '''
    def _convert_params(self, params: Dict) -> Dict:
        """
        Convertit les param√®tres float en int quand appropri√©
        
        R√®gles de conversion:
        - Les param√®tres avec 'period', 'window', 'length' ‚Üí int
        - Les param√®tres entiers d√©guis√©s en float (14.0 ‚Üí 14) ‚Üí int
        - Les vrais float (0.5, 1.23) ‚Üí conserv√©s en float
        
        Args:
            params: Dictionnaire de param√®tres
        
        Returns:
            Dictionnaire avec types corrig√©s
        """
        converted = {}
        
        for key, value in params.items():
            # Si ce n'est pas un nombre, garder tel quel
            if not isinstance(value, (int, float)):
                converted[key] = value
                continue
            
            # R√®gle 1: Les param√®tres de p√©riode doivent √™tre int
            period_keywords = ['period', 'window', 'length', 'span', 'lookback', 'days']
            if any(keyword in key.lower() for keyword in period_keywords):
                converted[key] = int(value)
                continue
            
            # R√®gle 2: Si c'est un float qui est en fait un entier (14.0 ‚Üí 14)
            if isinstance(value, float) and value.is_integer():
                converted[key] = int(value)
            else:
                # Garder le type original
                converted[key] = value
        
        return converted
'''


def fix_optimizer_file(optimizer_path: Path):
    """Corrige le fichier optimizer.py"""
    
    print("‚ïê" * 70)
    print("üîß CORRECTIF OPTIMIZER.PY")
    print("‚ïê" * 70)
    
    # Lire le fichier
    with open(optimizer_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier si le correctif est d√©j√† appliqu√©
    if '_convert_params' in content:
        print("‚úÖ Le correctif est d√©j√† appliqu√©!")
        return True
    
    print("üìù Application du correctif...\n")
    
    # 1. Ajouter la fonction _convert_params apr√®s __init__
    converter_code = create_param_converter()
    
    # Trouver la fin de __init__ et ins√©rer la fonction
    init_pattern = r'(def __init__\(self.*?\n(?:.*?\n)*?.*?self\.run_id = .*?\n)'
    if re.search(init_pattern, content, re.DOTALL):
        content = re.sub(
            init_pattern,
            r'\1' + converter_code + '\n',
            content,
            count=1,
            flags=re.DOTALL
        )
        print("‚úì Fonction _convert_params ajout√©e")
    else:
        print("‚ö†Ô∏è  Pattern __init__ non trouv√©, ajout √† la fin de la classe")
        # Fallback: ajouter apr√®s la premi√®re m√©thode
        content = content.replace(
            'def run(self',
            converter_code + '\n    def run(self'
        )
    
    # 2. Modifier _run_single_backtest pour utiliser _convert_params
    old_addstrategy = 'cerebro.addstrategy(self.strategy_class, **params, printlog=False)'
    new_addstrategy = '''# Convertir les param√®tres (float ‚Üí int si n√©cessaire)
            converted_params = self._convert_params(params)
            cerebro.addstrategy(self.strategy_class, **converted_params, printlog=False)'''
    
    if old_addstrategy in content:
        content = content.replace(old_addstrategy, new_addstrategy)
        print("‚úì Appel _convert_params ajout√© dans _run_single_backtest")
    else:
        print("‚ö†Ô∏è  Ligne addstrategy non trouv√©e, v√©rification manuelle n√©cessaire")
    
    # 3. Sauvegarder avec backup
    backup_path = optimizer_path.with_suffix('.py.backup')
    
    with open(backup_path, 'w', encoding='utf-8') as f:
        with open(optimizer_path, 'r', encoding='utf-8') as original:
            f.write(original.read())
    
    print(f"‚úì Backup cr√©√©: {backup_path}")
    
    # √âcrire le fichier corrig√©
    with open(optimizer_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úì Fichier corrig√©: {optimizer_path}")
    
    print("\n" + "‚ïê" * 70)
    print("‚úÖ CORRECTIF APPLIQU√â AVEC SUCC√àS!")
    print("‚ïê" * 70)
    print("\nüìã Prochaines √©tapes:")
    print("  1. V√©rifiez le fichier corrig√©")
    print("  2. Relancez votre optimisation Walk-Forward")
    print("  3. L'erreur 'float' ne devrait plus appara√Ætre\n")
    print("üí° En cas de probl√®me, restaurez depuis le backup:")
    print(f"   cp {backup_path} {optimizer_path}\n")
    
    return True


def find_optimizer():
    """Trouve le fichier optimizer.py"""
    possible_paths = [
        Path("optimization/optimizer.py"),
        Path("optimisation/optimizer.py"),
        Path("../optimization/optimizer.py"),
        Path("../optimisation/optimizer.py"),
    ]
    
    for path in possible_paths:
        if path.exists():
            return path.resolve()
    
    return None


def main():
    """Point d'entr√©e principal"""
    print("\n" + "‚ïê" * 70)
    print("üîç RECHERCHE DU FICHIER OPTIMIZER.PY")
    print("‚ïê" * 70 + "\n")
    
    optimizer_path = find_optimizer()
    
    if not optimizer_path:
        print("‚ùå Fichier optimizer.py non trouv√©!")
        print("\nüìÅ Chemins v√©rifi√©s:")
        print("  - optimization/optimizer.py")
        print("  - optimisation/optimizer.py")
        print("  - ../optimization/optimizer.py")
        print("  - ../optimisation/optimizer.py")
        print("\nüí° Solution:")
        print("  1. Naviguez vers le dossier racine de votre projet")
        print("  2. Relancez ce script depuis l√†")
        print("  OU")
        print("  3. Sp√©cifiez le chemin manuellement:")
        print("     python fix_optimizer_float_error.py /chemin/vers/optimizer.py\n")
        return False
    
    print(f"‚úì Fichier trouv√©: {optimizer_path}\n")
    
    # Appliquer le correctif
    success = fix_optimizer_file(optimizer_path)
    
    if success:
        print("\nüéâ Correction termin√©e avec succ√®s!")
        print("\nüìä Test rapide recommand√©:")
        print("   python -c \"from optimization.optimizer import UnifiedOptimizer; print('‚úì Import OK')\"")
    
    return success


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # Chemin sp√©cifi√© en argument
        optimizer_path = Path(sys.argv[1])
        if optimizer_path.exists():
            fix_optimizer_file(optimizer_path)
        else:
            print(f"‚ùå Fichier non trouv√©: {optimizer_path}")
    else:
        # Recherche automatique
        main()