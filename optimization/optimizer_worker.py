#!/usr/bin/env python3
"""
Fonctions Worker pour Multiprocessing

Ces fonctions doivent √™tre au niveau module (pas dans une classe)
pour √™tre s√©rialisables par multiprocessing (pickle).
"""

import backtrader as bt
import pandas as pd
from typing import Dict, Optional

from config import settings
from data.data_fetcher import create_data_feed
from utils.metrics_validator import safe_calculate_return , MetricsValidator

def run_backtest_worker(params: Dict,
                       preloaded_data: Dict[str, pd.DataFrame],
                       strategy_class,
                       config: Dict) -> Optional[Dict]:
    """
    Worker fonction pour ex√©cuter un backtest en parall√®le
    
    üéØ IMPORTANT: Cette fonction doit √™tre au niveau module pour pickling
    
    Args:
        params: Param√®tres de la strat√©gie √† tester
        preloaded_data: Dict {symbol: DataFrame} avec donn√©es pr√©-charg√©es
        strategy_class: Classe de la strat√©gie
        config: Configuration globale
    
    Returns:
        Dict avec r√©sultats ou None si √©chec
    """
    try:
        # Extraire la config
        capital = config.get('capital', 100000)
        
        # Cr√©er Cerebro optimis√©
        cerebro = bt.Cerebro(
            stdstats=False,  # Pas d'observers
            exactbars=-1,    # Mode m√©moire optimis√©
        )
        
        cerebro.broker.setcash(capital)
        cerebro.broker.setcommission(commission=settings.COMMISSION)
        
        # Charger les donn√©es depuis le cache
        for symbol, df in preloaded_data.items():
            # IMPORTANT: .copy() pour √©viter modification du cache
            data_feed = create_data_feed(df.copy(), name=symbol)
            cerebro.adddata(data_feed, name=symbol)
        
        # Convertir les param√®tres au bon type
        converted_params = _convert_params(params)
        
        # Ajouter la strat√©gie
        cerebro.addstrategy(
            strategy_class,
            **converted_params,
            printlog=False  # Pas de logs
        )
        
        # Analyseurs minimaux
        cerebro.addanalyzer(bt.analyzers.SharpeRatio, _name='sharpe')
        cerebro.addanalyzer(bt.analyzers.Returns, _name='returns')
        cerebro.addanalyzer(bt.analyzers.TradeAnalyzer, _name='trades')
        cerebro.addanalyzer(bt.analyzers.DrawDown, _name='drawdown')
        
        # Ex√©cuter
        start_value = cerebro.broker.getvalue()
        strategies = cerebro.run()
        end_value = cerebro.broker.getvalue()
        
        # R√©cup√©rer les r√©sultats
        strat = strategies[0]
        sharpe = strat.analyzers.sharpe.get_analysis()
        drawdown = strat.analyzers.drawdown.get_analysis()
        trades = strat.analyzers.trades.get_analysis()
        
        total_trades = trades.get('total', {}).get('total', 0)
        won_trades = trades.get('won', {}).get('total', 0)
        
        # üöÄ EARLY STOPPING OPTIONNEL
        # Filtrer les r√©sultats catastrophiques rapidement
        

        total_return = safe_calculate_return(start_value, end_value)

        
        if total_return < -50:  # Perte > 50%
            return None
        
        if total_trades < 3:  # Pas assez de trades
            return None
        
        # Construire le r√©sultat
        result = {
            **params,  # Inclure les param√®tres
            'sharpe': sharpe.get('sharperatio', 0) or 0,
            'return': total_return,
            'drawdown': drawdown.get('max', {}).get('drawdown', 0),
            'trades': total_trades,
            'win_rate': (won_trades / total_trades * 100) if total_trades > 0 else 0
        }
        validator = MetricsValidator()
        result = validator.validate_and_clean(result)
        return result
        
    except Exception as e:
        # En cas d'erreur, retourner None
        # Les erreurs seront logg√©es dans le processus principal
        return None


def _convert_params(params: Dict) -> Dict:
    """
    Convertit les param√®tres au bon type
    (certains param√®tres doivent √™tre int au lieu de float)
    
    Args:
        params: Param√®tres bruts
    
    Returns:
        Param√®tres convertis
    """
    converted = {}
    for key, value in params.items():
        # Si le param√®tre contient 'period', 'window', 'length' ‚Üí convertir en int
        if any(word in key.lower() for word in ['period', 'window', 'length', 'days']):
            converted[key] = int(value)
        else:
            converted[key] = value
    return converted


def run_backtest_worker_with_dates(params: Dict,
                                   preloaded_data: Dict[str, pd.DataFrame],
                                   strategy_class,
                                   config: Dict,
                                   start_date: str,
                                   end_date: str) -> Optional[Dict]:
    """
    Worker pour Walk-Forward avec dates sp√©cifiques
    
    Args:
        params: Param√®tres de la strat√©gie
        preloaded_data: Donn√©es pr√©-charg√©es (ignor√©es si dates diff√©rentes)
        strategy_class: Classe de la strat√©gie
        config: Configuration
        start_date: Date de d√©but
        end_date: Date de fin
    
    Returns:
        Dict avec r√©sultats ou None
    """
    try:
        # Pour Walk-Forward, il faut recharger les donn√©es avec les bonnes dates
        # Car chaque p√©riode a des dates diff√©rentes
        
        from data.data_handler import DataHandler
        
        capital = config.get('capital', 100000)
        symbols = config.get('symbols', ['AAPL'])
        
        # Cr√©er Cerebro optimis√©
        cerebro = bt.Cerebro(
            stdstats=False,
            exactbars=-1,
        )
        
        cerebro.broker.setcash(capital)
        cerebro.broker.setcommission(commission=settings.COMMISSION)
        
        # Charger les donn√©es pour cette p√©riode sp√©cifique
        data_handler = DataHandler()
        
        for symbol in symbols:
            df = data_handler.fetch_data(symbol, start_date, end_date)
            if df is not None and not df.empty:
                data_feed = create_data_feed(df, name=symbol)
                cerebro.adddata(data_feed, name=symbol)
        
        # Convertir param√®tres
        converted_params = _convert_params(params)
        
        # Ajouter strat√©gie
        cerebro.addstrategy(
            strategy_class,
            **converted_params,
            printlog=False
        )
        
        # Analyseurs
        cerebro.addanalyzer(bt.analyzers.SharpeRatio, _name='sharpe')
        cerebro.addanalyzer(bt.analyzers.Returns, _name='returns')
        cerebro.addanalyzer(bt.analyzers.TradeAnalyzer, _name='trades')
        cerebro.addanalyzer(bt.analyzers.DrawDown, _name='drawdown')
        
        # Ex√©cuter
        start_value = cerebro.broker.getvalue()
        strategies = cerebro.run()
        end_value = cerebro.broker.getvalue()
        
        # R√©sultats
        strat = strategies[0]
        sharpe = strat.analyzers.sharpe.get_analysis()
        drawdown = strat.analyzers.drawdown.get_analysis()
        trades = strat.analyzers.trades.get_analysis()
        
        total_trades = trades.get('total', {}).get('total', 0)
        won_trades = trades.get('won', {}).get('total', 0)
        
        result = {
            **params,
            'sharpe': sharpe.get('sharperatio', 0) or 0,
            'return': ((end_value - start_value) / start_value) * 100 if start_value > 0 else 0,
            'drawdown': drawdown.get('max', {}).get('drawdown', 0),
            'trades': total_trades,
            'win_rate': (won_trades / total_trades * 100) if total_trades > 0 else 0
        }
        
        return result
        
    except Exception as e:
        return None