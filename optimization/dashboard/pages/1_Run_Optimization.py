#!/usr/bin/env python3
"""
Page 1: Lancer une Optimisation
VERSION CORRIG√âE - Compatible Optuna + Streamlit
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).resolve().parent.parent.parent))

import streamlit as st
import time
from optimization.optimizer import UnifiedOptimizer
from optimization.results_storage import ResultsStorage
from dashboard.components.optimizer_form import create_optimization_form
from dashboard.components.metrics import (
    display_metric_cards,
    display_detailed_metrics,
    display_parameters_card,
)
from dashboard.utils.session_state import init_session_state

# Configuration
st.set_page_config(page_title="Run Optimization", page_icon="üöÄ", layout="wide")

# Initialiser le state
init_session_state()

# Header
st.title("üöÄ Lancer une Optimisation")
st.markdown("Configurez et lancez une optimisation de strat√©gie")

st.divider()

# Formulaire de configuration
strategy_class, config, opt_type = create_optimization_form()

st.divider()

# Bouton de lancement
col1, col2, col3 = st.columns([1, 1, 2])

with col1:
    run_button = st.button(
        "‚ñ∂Ô∏è Lancer l'Optimisation",
        type="primary",
        use_container_width=True,
        disabled=st.session_state.get("optimization_running", False),
    )

with col2:
    if st.session_state.get("optimization_running", False):
        if st.button("‚èπÔ∏è Annuler", use_container_width=True):
            st.session_state.optimization_running = False
            st.warning("‚ö†Ô∏è Optimisation annul√©e")
            st.rerun()

# Lancer l'optimisation
if run_button and strategy_class and config and opt_type:

    st.session_state.optimization_running = True

    # Zone de progression
    st.markdown("---")
    st.markdown("### üìä Optimisation en cours...")

    # Avertissement pour Optuna
    if opt_type == "optuna":
        st.info(
            "‚ÑπÔ∏è Optuna: Mode s√©quentiel activ√© pour compatibilit√© avec Streamlit. "
            "Pour parall√©lisation compl√®te, utilisez le script CLI."
        )

    progress_bar = st.progress(0)
    status_text = st.empty()
    eta_text = st.empty()

    try:
        # CORRECTION: D√©sactiver parall√©lisation pour Optuna avec Streamlit
        use_parallel = False if opt_type == "optuna" else True

        # Cr√©er l'optimiseur
        optimizer = UnifiedOptimizer(
            strategy_class=strategy_class,
            config=config,
            optimization_type=opt_type,
            verbose=False,
            use_parallel=use_parallel,  # ‚úÖ Conditionnel
        )

        st.session_state.current_run_id = optimizer.run_id

        # √âtat partag√© pour progression (thread-safe)
        import threading

        progress_lock = threading.Lock()
        progress_state = {"progress": 0.0, "eta": 0, "last_update": time.time()}

        # Callback thread-safe avec throttling
        def progress_callback(progress, eta_seconds):
            """Callback qui met √† jour l'√©tat sans toucher directement Streamlit"""
            with progress_lock:
                current_time = time.time()

                # Throttle: max 2 updates/seconde
                if current_time - progress_state["last_update"] < 0.5:
                    return

                progress_state["progress"] = min(progress, 1.0)
                progress_state["eta"] = max(eta_seconds, 0)
                progress_state["last_update"] = current_time

        # Container pour r√©sultats
        results_container = {"results": None, "error": None, "done": False}

        # Fonction d'optimisation dans thread
        def run_optimization():
            try:
                results_container["results"] = optimizer.run(
                    progress_callback=progress_callback
                )
            except Exception as e:
                results_container["error"] = e
            finally:
                results_container["done"] = True

        # Lancer dans un thread
        opt_thread = threading.Thread(target=run_optimization, daemon=True)
        opt_thread.start()

        # Boucle de mise √† jour de l'UI (thread principal)
        max_wait = 7200  # 2 heures max
        start_time = time.time()

        while not results_container["done"] and (time.time() - start_time) < max_wait:
            # Lire l'√©tat de progression
            with progress_lock:
                current_progress = progress_state["progress"]
                current_eta = progress_state["eta"]

            # Mettre √† jour l'UI (safe, on est dans le thread principal)
            progress_bar.progress(current_progress)

            # Formater et afficher le statut
            if current_eta > 0:
                eta_minutes = current_eta // 60
                eta_seconds = current_eta % 60
                status_text.text(
                    f"‚è≥ Progression: {current_progress*100:.1f}% - "
                    f"Reste: {int(eta_minutes)}m {int(eta_seconds)}s"
                )
            else:
                status_text.text(f"‚è≥ Progression: {current_progress*100:.1f}%")

            # Petit sleep pour ne pas spammer
            time.sleep(0.5)

        # Attendre la fin du thread
        opt_thread.join(timeout=5)

        # V√©rifier les erreurs
        if results_container["error"]:
            raise results_container["error"]

        results = results_container["results"]

        # Succ√®s
        if results and "best" in results:
            progress_bar.progress(1.0)
            status_text.empty()
            eta_text.empty()

            st.success("‚úÖ Optimisation termin√©e avec succ√®s !")

            # M√©triques principales
            st.divider()
            st.markdown("### üèÜ Meilleurs R√©sultats")
            display_metric_cards(results["best"])

            # Param√®tres optimaux
            st.divider()
            st.markdown("### üéØ Param√®tres Optimaux")
            display_parameters_card(results["best"])

            # M√©triques d√©taill√©es
            st.divider()
            st.markdown("### üìä Analyse D√©taill√©e")
            display_detailed_metrics(results["best"])

            # √âvaluation Sharpe
            sharpe = results["best"].get("sharpe", 0)
            st.divider()
            st.markdown("### üìà √âvaluation de la Performance")

            if sharpe > 2.5:
                st.success(
                    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê EXCELLENTE performance ! Strat√©gie tr√®s prometteuse."
                )
            elif sharpe > 2.0:
                st.success("‚≠ê‚≠ê‚≠ê‚≠ê TR√àS BONNE performance. Strat√©gie solide.")
            elif sharpe > 1.5:
                st.info("‚≠ê‚≠ê‚≠ê BONNE performance. Strat√©gie acceptable.")
            elif sharpe > 1:
                st.warning("‚≠ê‚≠ê Performance MOYENNE. √Ä am√©liorer.")
            else:
                st.error("‚≠ê Performance FAIBLE. Revoir la strat√©gie.")

            # Importance des param√®tres (Optuna uniquement)
            if opt_type == "optuna" and "param_importance" in results:
                st.divider()
                st.markdown("### üîç Importance des Param√®tres")

                import pandas as pd

                importance = results["param_importance"]
                if importance:
                    df = pd.DataFrame(
                        [
                            {"Param√®tre": k, "Importance": v}
                            for k, v in sorted(
                                importance.items(), key=lambda x: x[1], reverse=True
                            )
                        ]
                    )

                    st.dataframe(df, use_container_width=True)

                    st.info(
                        "üí° Les param√®tres avec une importance √©lev√©e ont le plus d'impact sur la performance."
                    )

            # Sauvegarder dans session state
            st.session_state.last_optimization_results = results
            st.session_state.optimization_running = False

        else:
            st.error("‚ùå √âchec de l'optimisation - Aucun r√©sultat valide")
            st.session_state.optimization_running = False

    except Exception as e:
        st.error(f"‚ùå Erreur pendant l'optimisation: {str(e)}")
        st.session_state.optimization_running = False

        # Afficher le traceback pour debug
        with st.expander("üîç D√©tails de l'erreur"):
            import traceback

            st.code(traceback.format_exc())

# Aide
with st.expander("‚ÑπÔ∏è Comment √ßa marche ?"):
    st.markdown(
        """
    ### üéØ Workflow d'Optimisation
    
    1. **Choisir une strat√©gie** : S√©lectionnez la strat√©gie √† optimiser
    2. **Configurer les param√®tres** : Utilisez un preset ou personnalisez
    3. **Lancer l'optimisation** : Le syst√®me teste diff√©rentes combinaisons
    4. **Analyser les r√©sultats** : Consultez les m√©triques et param√®tres optimaux
    
    ### üî¨ Types d'Optimisation
    
    - **Grid Search** : Test exhaustif (parall√©lis√©)
    - **Walk-Forward** : Validation robuste
    - **Optuna** : Optimisation Bay√©sienne (50-100x plus rapide)
    
    ### ‚ö†Ô∏è Note pour Optuna + Streamlit
    
    Optuna est ex√©cut√© en mode s√©quentiel dans le dashboard pour compatibilit√©.
    Pour la parall√©lisation compl√®te, utilisez:
    ```bash
    python quick_optimize.py
    ```
    """
    )

# Footer
st.divider()
st.caption(
    "üí° Astuce: Pour des optimisations longues avec parall√©lisation, utilisez le script CLI."
)
